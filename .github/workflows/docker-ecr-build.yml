name: LYFE Actions

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

env:
  SERVICE_NAME: ${{secrets.SERVICE_NAME}}

  AWS_ACCOUNT_ID: ${{secrets.AWS_ACCOUNT_ID}}
  AWS_REGION: ${{secrets.AWS_REGION}}


  AWS_ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}


jobs:
  nestjs-to-ecr:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

        # FIXME: Terraform의 template 문법을 사용하기 위해 envsubst를 적용.
      - name: create the environment with task-definition.json template file
        env:
          AWS_SNS_REGION: ${{secrets.AWS_SNS_REGION}}
          DATABASE_URL: ${{secrets.DATABASE_URL}}
          JWT_REFRESH_SECRET_KEY: ${{secrets.JWT_REFRESH_SECRET_KEY}}
          JWT_REFRESH_EXPIRATION_TIME: ${{secrets.JWT_REFRESH_EXPIRATION_TIME}}
        run: |
          envsubst < terraform/task-definition.tmpl > terraform/task-definition.json
          envsubst < env/test.tmpl > env/test.env

      - name: Install Global pnpm
        run: |
          echo "npm install -g pnpm"
          npm install -g pnpm

      - name: Install dependencies
        run: |
          echo "pnpm install"
          pnpm install

      - name: Build
        run: |
          echo "pnpm run build"
          pnpm run build

      #      - name: Test
      #        run: |
      #          echo "pnpm run test"
      #          pnpm run test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker Build, Tag, Push image to AWS ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest . --file docker/Dockerfile
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./terraform/task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true